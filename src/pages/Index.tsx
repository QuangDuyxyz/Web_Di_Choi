
import { useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Header } from '@/components/Header';
import { Footer } from '@/components/Footer';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { BirthdayCelebration } from '@/components/BirthdayCelebration';
import { EventCard } from '@/components/EventCard';
import { PostForm } from '@/components/PostForm';
import { PostItem } from '@/components/PostItem';
import { useAuth } from '@/contexts/AuthContext';
import { useBirthday } from '@/contexts/BirthdayContext';
import { useEvents } from '@/contexts/EventsContext';
import { usePost } from '@/contexts/PostContext';
import { CalendarIcon, Users, RefreshCw } from 'lucide-react';

const Index = () => {
  const { isAuthenticated, user } = useAuth();
  const navigate = useNavigate();
  const { birthdayPeople, todaysBirthdays, showCelebration } = useBirthday();
  const { events } = useEvents();
  const { posts, isLoading: isPostsLoading } = usePost();
  
  // Get upcoming events (next 5 events)
  const today = new Date();
  const upcomingEvents = [...events]
    .filter(event => new Date(event.date) >= today)
    .sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())
    .slice(0, 5);

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex flex-col">
        <Header />
        
        <main className="flex-1 container mx-auto px-4 py-12 flex flex-col items-center justify-center">
          <div className="text-center max-w-2xl mx-auto">
            <h1 className="text-4xl font-bold mb-4 bg-gradient-to-r from-primary to-secondary bg-clip-text text-transparent">
              FriendVerse
            </h1>
            <p className="text-xl mb-8">Timeline h·ªôi b·∫°n th√¢n</p>
            <p className="mb-8 text-gray-600">
              Ch√†o m·ª´ng ƒë·∫øn v·ªõi FriendVerse, n∆°i l∆∞u gi·ªØ nh·ªØng k·ª∑ ni·ªám ƒë·∫∑c bi·ªát c·ªßa nh√≥m b·∫°n th√¢n. 
              ƒêƒÉng nh·∫≠p ƒë·ªÉ xem timeline s·ª± ki·ªán, sinh nh·∫≠t v√† c√°c ho·∫°t ƒë·ªông s·∫Øp t·ªõi!
            </p>
            
            <Button size="lg" onClick={() => navigate('/login')}>
              ƒêƒÉng nh·∫≠p
            </Button>
          </div>
        </main>
        
        <Footer />
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      
      {/* Birthday celebration popup */}
      <BirthdayCelebration />
      
      <main className="flex-1 container mx-auto px-4 py-8">
        <div className="flex flex-col md:flex-row gap-6 items-start">
          {/* Main content */}
          <div className="flex-1 space-y-8">
            {/* Ph·∫ßn ch√†o m·ª´ng v√† sinh nh·∫≠t */}
            <section>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">Ch√†o m·ª´ng, {user?.displayName}!</h2>
              </div>
              
              {/* Today's birthday section */}
              {birthdayPeople.length > 0 && (
                <Card className="mb-6 bg-gradient-to-br from-friendverse-pink to-friendverse-purple">
                  <CardContent className="p-6">
                    <h3 className="text-xl font-semibold mb-3">
                      üéÇ H√¥m nay l√† sinh nh·∫≠t!
                    </h3>
                    <div className="flex flex-wrap gap-4">
                      {birthdayPeople.map(person => (
                        <div key={person.id} className="flex items-center gap-2">
                          <div className="w-10 h-10 rounded-full overflow-hidden border-2 border-white">
                            <img 
                              src={person.avatar} 
                              alt={person.displayName} 
                              className="w-full h-full object-cover"
                            />
                          </div>
                          <span>{person.displayName}</span>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
              
              {/* Hi·ªÉn th·ªã sinh nh·∫≠t h√¥m nay n·∫øu c√≥ */}
              {todaysBirthdays.length > 0 && (
                <div className="grid grid-cols-1 gap-4 mb-6">
                  {todaysBirthdays.map(event => (
                    <EventCard key={event.id} event={event} />
                  ))}
                </div>
              )}
            </section>
            
            {/* Form ƒëƒÉng b√†i v√† danh s√°ch b√†i ƒëƒÉng */}
            <section>
              {/* Form ƒëƒÉng b√†i */}
              <PostForm />
              
              {/* Danh s√°ch b√†i ƒëƒÉng */}
              <div className="mb-4 flex justify-between items-center">
                <h2 className="text-xl font-bold">B·∫£ng tin</h2>
                <Button variant="outline" size="sm" className="gap-1">
                  <RefreshCw size={14} />
                  L√†m m·ªõi
                </Button>
              </div>
              
              {isPostsLoading ? (
                <Card className="p-6 text-center">
                  <p>ƒêang t·∫£i b√†i vi·∫øt...</p>
                </Card>
              ) : posts.length > 0 ? (
                posts.map(post => <PostItem key={post.id} post={post} />)
              ) : (
                <Card className="p-6 text-center">
                  <p>Ch∆∞a c√≥ b√†i vi·∫øt n√†o. H√£y l√† ng∆∞·ªùi ƒë·∫ßu ti√™n ƒëƒÉng b√†i!</p>
                </Card>
              )}
            </section>

            <section>
              <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold">S·∫Øp t·ªõi</h2>
                <Button variant="ghost" onClick={() => navigate('/timeline')}>
                  Xem t·∫•t c·∫£
                </Button>
              </div>
              
              {upcomingEvents.length > 0 ? (
                <div className="grid grid-cols-1 gap-4">
                  {upcomingEvents.map(event => (
                    <EventCard key={event.id} event={event} />
                  ))}
                </div>
              ) : (
                <Card>
                  <CardContent className="p-6 text-center">
                    <p>Kh√¥ng c√≥ s·ª± ki·ªán s·∫Øp t·ªõi n√†o.</p>
                  </CardContent>
                </Card>
              )}
            </section>
          </div>

          {/* Sidebar */}
          <div className="w-full md:w-64 space-y-4">
            <Card>
              <CardContent className="p-4">
                <h3 className="font-medium mb-2">Truy c·∫≠p nhanh</h3>
                <div className="space-y-2">
                  <Button variant="outline" className="w-full justify-start" onClick={() => navigate('/timeline')}>
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    Timeline
                  </Button>
                  <Button variant="outline" className="w-full justify-start" onClick={() => navigate('/members')}>
                    <Users className="mr-2 h-4 w-4" />
                    Th√†nh vi√™n
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      
      <Footer />
    </div>
  );
};

export default Index;
